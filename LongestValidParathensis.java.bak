public class Solution {
    public int longestValidParentheses(String s) {
        // Start typing your Java solution below
        // DO NOT write main() function
        return naiveSearch(s);
    }
    
    public int naiveSearch(String s){
        int size = s.length();
        int longest = 0;
        int i = 1;
        int leftCount = 0, rightCount = 0;
        while(i < size){
            if(s.charAt(i - 1) == '(' && s.charAt(i) == '('){
                leftCount += 1;
                i += 1;
                if(i == size)
                    leftCount +=1;
            }
            else if (s.charAt(i - 1) == ')' && s.charAt(i) == ')'){
                rightCount += 1;
                i += 1;
                if(i == size)
                    rightCount +=1;
            }
            else if(s.charAt(i - 1) == '(' && s.charAt(i) == ')'){
                i += 1;
                leftCount += 1;
                if(i == size)
                    rightCount +=1;
            }
            else{
                i += 1;
                rightCount += 1;
                if(i == size)
                    leftCount +=1;
            }
            if(i == size || rightCount > leftCount){
                int count = 2 * Math.min(leftCount, rightCount);
                if(longest < count){
                    longest = count;
                    count = 0;
                }
                leftCount = 0;
                rightCount = 0;
            }
        }
        return longest;
    }
}