import java.util.Stack;
public class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        // Start typing your Java solution below
        // DO NOT write main() function
        
    }
    
    public boolean naiveSearch(String s1, String s2, String s3){
        Boolean result = true;
        int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();
        if(len1 + len2 != len3){
            return false;
        }
        Stack<IntegerPair> diffs = new Stack<IntegerPair>();
        for(int i = 0, j = 0; i + j < len3;){
            if(i < len1 && s1.charAt(i) == s3.charAt(i + j) && j < len2 && s2.charAt(j) == s3.charAt(i + j)){
                IntegerPair ip = new IntegerPair(i, j);
                diffs.push(ip);
                i++;
            }
            else if(i < len1 && s1.charAt(i) == s3.charAt(i + j))
                i++;
            else if(j < len2 && s2.charAt(j) == s3.charAt(i + j))
                j++;
            else if(!diffs.empty()){
                IntegerPair ip = diffs.pop();
                i = ip.a;
                j = ip.b;
                j++;
            }
            else{
                result = false;
                break;
            }
        }
        return result;
    }
}

class IntegerPair{
    int a, b;
    public IntegerPair(int a, int b){
        this.a = a;
        this.b = b;
    }
}