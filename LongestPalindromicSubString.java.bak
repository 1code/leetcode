public class Solution {
    public String longestPalindrome(String s) {
        // Start typing your Java solution below
        // DO NOT write main() function
        
    }
    
    public String naiveSearch(String s){
        int size = s.length();
        String longest = "";
        if(size < 1) return "";
        if(size < 2) return s;
        for(int i = 0; i < size - 1; i++){
            int j = i+1, k = i - 1;
            
            String c = s.substring(i, i+1);
            String tmp = "";
            
            String pos = s.substring(j, j+1);
            String pre;
            
            if(pos.equals(c)){
                tmp = c + pos;
                j++;
                while(j < size && k >=0){
                    pos = s.substring(j, j+1);
                    pre = s.substring(k, k+1);
                    if(pos.equals(pre)){
                        tmp = pre + tmp + pos;
                        j++;
                        k--;
                    }
                    else{
                        break;
                    }
                }
                if(tmp.length() > 1 && tmp.length() > longest.length())
                    longest = tmp;
            }
            j = i + 1;
            k = i - 1;
            tmp = c;
            
            while(j < size && k >=0){
                pos = s.substring(j, j+1);
                pre = s.substring(k, k+1);
                if(pos.equals(pre)){
                    tmp = pre + tmp + pos;
                    j++;
                    k--;
                }
                else{
                    break;
                }
            }
            
            if(tmp.length() > 1 && tmp.length() > longest.length())
                longest = tmp;
        }
        return longest;
    }
}